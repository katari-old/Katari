<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:util="http://www.springframework.org/schema/util"
  xmlns:katari="http://www.globant.com/schema/katari"
  xmlns:camel="http://camel.apache.org/schema/spring"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
      http://www.springframework.org/schema/util
      http://www.springframework.org/schema/util/spring-util-2.0.xsd
      http://www.globant.com/schema/katari
      http://www.globant.com/schema/katari/katari.xsd
      http://camel.apache.org/schema/spring
      http://camel.apache.org/schema/spring/camel-spring.xsd">

  <!-- The user module configuration file. This file must be included in the
  application context to use this module. -->

  <bean id="user.module" class="com.globant.katari.core.web.ConfigurableModule">
    <property name='entryPoints'>
      <!-- The servlet mappings. It maps the spring
           EventFilterDispatcherServlet to *.do. -->
      <bean class="org.springframework.beans.factory.config.MapFactoryBean">
        <property name="sourceMap">
          <map>
            <!-- The spring-mvc controller servlet -->
            <entry key=".*\.do">
              <bean class="com.globant.katari.core.web.ServletAndParameters">
                <constructor-arg index="0">
                  <bean
                    class="com.globant.katari.core.web.EventFilterDispatcherServlet"
                    />
                </constructor-arg>
                <constructor-arg index="1">
                  <map>
                    <entry key="contextConfigLocation">
                      <value>
                        classpath:/com/globant/katari/user/view/spring-servlet.xml
                      </value>
                    </entry>
                  </map>
                </constructor-arg>
              </bean>
            </entry>
          </map>
        </property>
      </bean>
    </property>

    <property name='menuBar'>
      <!-- The menu bar. -->
      <katari:menuBar>
        <katari:menuNode name='Administration'>
          <katari:menuItem name='Users' link='users.do' />
        </katari:menuNode>
      </katari:menuBar>
    </property>

    <property name="urlToRoleMapper">
      <bean class="com.globant.katari.core.security.StaticUrlToRoleMapper">
        <constructor-arg index="0">
          <map>
            <entry key="/changePassword.do" value="IS_AUTHENTICATED_REMEMBERED" />
            <entry key="/userDelete.do" value="ROLE_ADMINISTRATOR" />
            <entry key="/createUser.do" value="ROLE_ADMINISTRATOR" />
            <entry key="/**/*" value="ROLE_ADMINISTRATOR" />
          </map>
        </constructor-arg>
      </bean>
    </property>

    <property name="messageSource">
      <!-- Message source for this module, loaded from localized "messages_xx"
      files.
      Note: as this message source is not named messageSource, it is not used as
      the defaulte message source for the application context. -->
      <bean id="user.messageSource"
        class="com.globant.katari.core.spring.KatariMessageSource"
        p:basename="classpath:/com/globant/katari/user/lang/messages"
        p:debugPrefix='../katari-user/src/main/resources'
        p:debug-ref='debugMode'>
        <constructor-arg index='0' value='user'/>
        <constructor-arg index='1' ref='katari.messageSource'/>
      </bean>
    </property>

  </bean>

  <!-- We expose the user repository as a public bean. It is used for the
    security modules. -->
  <bean id='user.userRepository'
    class='com.globant.katari.user.domain.UserRepository'
    p:sessionFactory-ref='katari.sessionFactory'
    />

  <bean class='com.globant.katari.core.web.ListFactoryAppender'>
    <constructor-arg value='katari.persistentClasses'/>
    <constructor-arg>
      <list>
        <value>com.globant.katari.user.domain.User</value>
      </list>
    </constructor-arg>
  </bean>

  <!-- The cache configurations for the entities in the user module (just
       User for now). -->
  <bean class='com.globant.katari.core.web.ListFactoryAppender'>
    <constructor-arg value='katari.hibernateCacheRegions'/>
    <constructor-arg>
      <list>
        <ref bean='user.userCache'/>
      </list>
    </constructor-arg>
  </bean>

  <!-- The cache configurations for User. This can be overriden to fine-tune
       the User cache. -->
  <bean id='user.userCache' class='net.sf.ehcache.config.CacheConfiguration'>
    <property name="name" value="com.globant.katari.user.domain.User" />
    <property name="maxElementsInMemory" value="1000" />
    <property name="eternal" value="false" />
  </bean>

  <!-- Defines the searchable entities and their corresponding handlers for the
       search module. -->
  <bean class='com.globant.katari.core.web.ListFactoryAppender'>
    <constructor-arg value='search.indexableClasses'/>
    <constructor-arg value='true'/>
    <constructor-arg>
      <list>
        <value>com.globant.katari.user.domain.User</value>
        <value>com.globant.katari.hibernate.coreuser.domain.Role</value>
      </list>
    </constructor-arg>
  </bean>
  <bean class='com.globant.katari.core.web.ListFactoryAppender'>
    <constructor-arg value='search.adapters'/>
    <constructor-arg value='true'/>
    <constructor-arg>
      <list>
        <bean class="com.globant.katari.user.domain.UserSearchAdapter">
          <constructor-arg value='/module/user'/>
        </bean>
      </list>
    </constructor-arg>
  </bean>

  <!-- An implementation of UserDetailsService that builds a user details
  object that delegates the user handling to the user domain object.
  -->
  <bean id="user.userDetailsService" lazy-init='true'
      class="com.globant.katari.user.integration.DomainUserDetailsService">
    <constructor-arg>
      <ref bean="user.userRepository"/>
    </constructor-arg>
    <constructor-arg>
      <ref bean="katari.transaction"/>
    </constructor-arg>
  </bean>

  <!-- We use the userRepository from the user module. -->
  <alias name="user.userRepository" alias="userRepository"/>

  <!-- Events raised. -->
  <!-- Creates the katari.user.deleteUser endpoint. The delete user sends a
       DeleteMessage to this endpoint just before deleting the user. Listeners
       of this event must perform all related actions, like removing data owned
       by the user being deleted. The response for this event must be a goAhead
       response. -->
  <bean class='com.globant.katari.core.spring.EventEndpoint'>
    <constructor-arg ref='user.deleteMessageAggregator'/>
    <constructor-arg value='direct:katari.user.deleteUser'/>
    <constructor-arg ref='user.deleteUserListeners'/>
  </bean>

  <!-- Creates the katari.user.vetoDeleteUser endpoint. The delete user sends a
       DeleteMessage to this endpoint before deleting the user. Listeners
       of this event can stop the deletion by sending a reject message
       response. If this is the case, the user is not deleted. -->
  <bean class='com.globant.katari.core.spring.EventEndpoint'>
    <constructor-arg ref='user.deleteMessageAggregator'/>
    <constructor-arg value='direct:katari.user.vetoDeleteUser'/>
    <constructor-arg ref='user.vetoDeleteUserListeners'/>
  </bean>

  <!-- Collapses all the delete messages into one. -->
  <bean id="user.deleteMessageAggregator"
    class="com.globant.katari.hibernate.coreuser.DeleteMessageAggregator"/>

  <!-- The list of event listeners for the deleteUser event. This is intended
       to be extended with ListFactoryAppender. -->
  <util:list id='user.deleteUserListeners'/>

  <!-- The list of event listeners for the vetoDeleteUser event. This is intended
       to be extended with ListFactoryAppender. -->
  <util:list id='user.vetoDeleteUserListeners'/>

</beans>

<!-- vim: set ts=2 et sw=2 ai : -->

