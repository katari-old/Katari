<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <!-- vim: set ts=2 et sw=2 ai: -->

  <parent>
    <groupId>com.globant.katari</groupId>
    <artifactId>dev</artifactId>
    <version>0.48-SNAPSHOT</version>
  </parent>

  <modelVersion>4.0.0</modelVersion>
  <groupId>com.globant.katari</groupId>
  <artifactId>katari-nodatabase</artifactId>
  <packaging>war</packaging>
  <name>Katari - sample without database</name>

  <dependencies>
    <!-- Test only dependencies -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
    </dependency>

    <dependency>
      <groupId>org.easymock</groupId>
      <artifactId>easymock</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
    </dependency>

    <dependency>
      <groupId>net.sourceforge.htmlunit</groupId>
      <artifactId>htmlunit</artifactId>
    </dependency>

    <!-- Runtime dependencies -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>

    <!-- slf4j logging implementation. This package is not directly imported
         from sources. -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
    </dependency>

    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
    </dependency>

    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
    </dependency>

    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
    </dependency>

    <dependency>
      <groupId>org.acegisecurity</groupId>
      <artifactId>acegi-security</artifactId>
    </dependency>

    <dependency>
      <groupId>org.freemarker</groupId>
      <artifactId>freemarker</artifactId>
    </dependency>

    <!-- Provided by the container. -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
    </dependency>

    <!-- We use ${groupId} because we will depend on the style package from the
    current groupId. -->
    <dependency>
      <groupId>${groupId}</groupId>
      <artifactId>katari-style</artifactId>
    </dependency>

    <dependency>
      <groupId>com.globant.katari</groupId>
      <artifactId>katari-core</artifactId>
    </dependency>

    <dependency>
      <groupId>com.globant.katari</groupId>
      <artifactId>katari-classic-menu</artifactId>
    </dependency>

    <dependency>
      <groupId>com.globant.katari</groupId>
      <artifactId>katari-ajax</artifactId>
    </dependency>

    <dependency>
      <groupId>com.globant.katari</groupId>
      <artifactId>katari-local-login</artifactId>
    </dependency>

  </dependencies>

  <build>
    <finalName>${artifactId}</finalName>

    <!-- Filters the katari.properties resource. -->
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>katari.properties</include>
          <include>
            com/globant/katari/sample/functionaltest/test.properties
          </include>
        </includes>
      </testResource>
      <testResource>
        <directory>src/test/resources</directory>
        <excludes>
          <exclude>katari.properties</exclude>
        </excludes>
      </testResource>
    </testResources>

    <plugins>

      <!-- Starts tomcat and deploys the web application in it, listening at
      port 8100.  The plugin is also bounded to the pre-integration-test and
      post-integration-test phase to start and stop the deployed application to
      run the integration tests. -->
      <plugin>
        <groupId>org.codehaus.cargo</groupId>
        <artifactId>cargo-maven2-plugin</artifactId>
        <version>1.1.2</version>

        <executions>

          <execution>
            <id>start-container</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
            <configuration>
              <wait>false</wait>
              <configuration>
                <home>${project.build.directory}/tmp/cargo</home>
                <properties>
                  <reloadable>true</reloadable>
                  <cargo.servlet.port>${cargo.servlet.port}</cargo.servlet.port>
                  <cargo.rmi.port>${cargo.rmi.port}</cargo.rmi.port>
                  <cargo.tomcat.ajp.port>
                    ${cargo.tomcat.ajp.port}
                  </cargo.tomcat.ajp.port>
                </properties>
                <deployables>
                  <deployable>
                    <groupId>${project.groupId}</groupId>
                    <artifactId>${project.artifactId}</artifactId>
                    <type>war</type>
                  </deployable>
                </deployables>
              </configuration>
            </configuration>
          </execution>

          <!-- Stops the container after the integration tests -->
          <execution>
            <id>stop-container</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
            <configuration>
              <wait>true</wait>
              <configuration>
                <home>${project.build.directory}/tmp/cargo</home>
                <properties>
                  <cargo.servlet.port>${cargo.servlet.port}</cargo.servlet.port>
                  <cargo.rmi.port>${cargo.rmi.port}</cargo.rmi.port>
                  <cargo.tomcat.ajp.port>
                    ${cargo.tomcat.ajp.port}
                  </cargo.tomcat.ajp.port>
                </properties>
              </configuration>
            </configuration>
          </execution>

        </executions>

        <configuration>

          <container>
            <containerId>tomcat5x</containerId>
            <zipUrlInstaller>
              <url>${cargo.tomcatLocation}</url>
            </zipUrlInstaller>
            <dependencies>
              <dependency>
                <location>${basedir}/target/test-classes</location>
              </dependency>
            </dependencies>
          </container>
          <configuration>
            <properties>
              <cargo.servlet.port>${cargo.servlet.port}</cargo.servlet.port>
              <cargo.rmi.port>${cargo.rmi.port}</cargo.rmi.port>
              <cargo.tomcat.ajp.port>
                ${cargo.tomcat.ajp.port}
              </cargo.tomcat.ajp.port>
            </properties>
          </configuration>

        </configuration>

      </plugin>

      <!-- Defines two sets of tests, one for normal unit tests and the other
      for functional testing. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <!-- Excludes all the functional tests from the default surefire
               execution phase. -->
          <excludes>
            <exclude>**/functionaltest/**/*.java</exclude>
          </excludes>
        </configuration>
        <executions>
          <!-- Unit tests that require the web application deployed to a
               container. This is bound to the integration-test phase. -->
          <execution>
            <id>Functional tests</id>
            <phase>integration-test</phase>
            <configuration>
              <excludes><exclude>none</exclude></excludes>
              <includes>
                <include>**/functionaltest/**/*Test.java </include>
              </includes>
            </configuration>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.mortbay.jetty</groupId>
        <artifactId>maven-jetty-plugin</artifactId>
        <version>${dependency.jetty-plugin.version}</version>
        <configuration>
          <contextPath>katari-sample</contextPath>
          <connectors>
            <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
              <port>8098</port>
              <maxIdleTime>60000</maxIdleTime>
            </connector>
          </connectors>
          <useTestClasspath>true</useTestClasspath>
          <scanIntervalSeconds>10</scanIntervalSeconds>
        </configuration>
      </plugin>

    </plugins>
  </build>

  <profiles>

    <!-- With this profile active, cargo:start starts tomcat and deploys the
    expanded web application in it, listening at port 8098. You must first run
    mvn war:inplace. -->
    <profile>
      <id>cargo-inplace</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <version>1.1.2</version>
            <configuration>
              <container>
                <containerId>tomcat5x</containerId>
                <zipUrlInstaller>
                  <url>${cargo.tomcatLocation}</url>
                </zipUrlInstaller>
                <dependencies>
                  <dependency>
                    <location>${basedir}/target/test-classes</location>
                  </dependency>
                </dependencies>
              </container>
              <configuration>
                <home>${project.build.directory}/tmp/cargo</home>
                <properties>
                  <reloadable>true</reloadable>
                  <cargo.servlet.port>8098</cargo.servlet.port>
                </properties>
                <deployables>
                  <deployable>
                    <!-- Deploys the exploded webapp. -->
                    <location>${basedir}/src/main/webapp</location>
                    <properties>
                      <context>katari</context>
                    </properties>
                  </deployable>
                </deployables>
              </configuration>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <properties>
    <!-- This property is intended to be overriden from the command line in
         case that apache cannot be reached normally. This is specifically used
         to build katari inside Globant in hudson. -->
    <cargo.tomcatLocation>
      http://apache.xmundo.com.ar/tomcat/tomcat-5/v5.5.28/bin/apache-tomcat-5.5.28.zip
    </cargo.tomcatLocation>

    <!-- Ports used during testing, intended to be overriden from the command
         line by a CI server like hudson. -->
    <cargo.servlet.port>8099</cargo.servlet.port>
    <cargo.rmi.port>8091</cargo.rmi.port>
    <cargo.tomcat.ajp.port>8092</cargo.tomcat.ajp.port>
  </properties>

</project>

