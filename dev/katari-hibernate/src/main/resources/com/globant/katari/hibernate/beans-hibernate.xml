<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:katari="http://www.globant.com/schema/katari"
      xmlns:p="http://www.springframework.org/schema/p"
      xmlns:util="http://www.springframework.org/schema/util"
      xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
      http://www.globant.com/schema/katari
      http://www.globant.com/schema/katari/katari.xsd
      http://www.springframework.org/schema/util
      http://www.springframework.org/schema/util/spring-util-2.0.xsd">

  <description>
    Katari hibernate spring application context. This context contains
    hibernate dependent beans.
  </description>

  <!-- Hibernate SessionFactory -->
  <bean id="katari.sessionFactory"
    class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
    lazy-init="true">
    <property name="dataSource" ref="katari.lazyDataSource" />
    <property name="hibernateProperties"
      ref='katari.configuredHibernateProperties'/>
    <property name="annotatedClasses" ref='katari.persistentClasses' />
  </bean>

  <!-- Hibernate properties. They are composed by initalHibernateProperties and
       hibernateProperties. The initalHibernateProperties disables the second
       level cache. hibernateProperties is intended to be overriden by the
       containing webapp.
       
       We went through all this because hibernate enables the second level
       cache even when there is no cache configured. This makes the application
       fail if at least one class is annotated with the cache configuration. We
       want the containing webapp to decide to use or not any cache. -->
  <bean id='katari.configuredHibernateProperties'
    class='com.globant.katari.core.spring.OverridingMapFactoryBean'>
    <property name="targetMapClass" value="java.util.LinkedHashMap" />
    <property name='sourceMap' ref='katari.initalHibernateProperties'/>
    <property name="overridingMap" ref='katari.hibernateProperties'/>
  </bean>

  <bean id="katari.initalHibernateProperties"
    class="org.springframework.beans.factory.config.PropertiesFactoryBean">
    <property name="properties">
      <props>
        <prop key="hibernate.cache.use_second_level_cache">false</prop>
      </props>
    </property>
  </bean>

  <bean id="katari.hibernateProperties"
    class="org.springframework.beans.factory.config.PropertiesFactoryBean"/>

  <!-- Bean to be overriden to configure the ehcache region factory. This may
       be used by a module that implements caching, like katari-ehcache. -->
  <bean id='katari.regionFactory'
    class="com.globant.katari.core.spring.NullFactoryBean" />

  <!-- Modules will add their cache configurations to this list. -->
  <util:list id='katari.hibernateCacheRegions'/>

  <!-- Modules will add their persistent classes to this list. -->
  <util:list id='katari.persistentClasses'/>

  <!-- Transaction manager for a single Hibernate SessionFactory. -->
  <bean id="katari.transactionManager" lazy-init="true"
    class="org.springframework.orm.hibernate4.HibernateTransactionManager"
    p:sessionFactory-ref="katari.sessionFactory"
    p:dataSource-ref="katari.lazyDataSource" />

  <!-- Adds a database checker to the list of ping services -->
  <bean class='com.globant.katari.core.web.ListFactoryAppender'>
    <constructor-arg value='katari.pingServices'/>
    <constructor-arg>
      <list>
        <!-- The database ping -->
        <bean class="com.globant.katari.hibernate.PingDatabase">
          <constructor-arg ref="katari.lazyDataSource"/>
          <constructor-arg ref='katari.pingDatabaseQuery'/>
          <constructor-arg ref="katari.developmentDataBaseChecker"/>
        </bean>
      </list>
    </constructor-arg>
  </bean>

  <!-- ============================================================= -->
  <!-- ================== Security related beans =================== -->
  <!-- ============================================================= -->

  <!-- A bean to override the query to perform to test if the database is
       alive. -->
  <bean class='com.globant.katari.core.spring.StringHolder'
    name = 'katari.pingDatabaseQuery'
    p:value = 'select * from users where id = 1' />

  <!-- A bean to override the marker table. -->
  <bean class='com.globant.katari.core.spring.StringHolder'
    name = 'katari.markerTable' p:value = 'katari_marker_666' />

  <!-- A utility bean that checks if the application is running against a
  development database. -->
  <bean id="katari.developmentDataBaseChecker"
    class="com.globant.katari.hibernate.DevelopmentDataBaseChecker">
    <constructor-arg ref="katari.lazyDataSource"/>
    <constructor-arg ref='katari.markerTable'/>
  </bean>

  <!-- Data source to use on beans that may be used in post processors.
       
  This was motivated by the katari-monitoring module that needs to post-process
  the data source to monitor jdbc connections. -->
  <bean id='katari.lazyDataSource'
    class="org.springframework.aop.framework.ProxyFactoryBean">
    <property name="targetSource">
      <bean class="org.springframework.aop.target.LazyInitTargetSource">
        <property name="targetBeanName" value="katari.dataSource"/>
      </bean>
    </property>
  </bean>

  <bean id='katari.transaction' scope='singleton' lazy-init="true"
    class='com.globant.katari.hibernate.Transaction'>
    <constructor-arg index='0' ref='katari.transactionManager' />
  </bean>

</beans>

<!-- vim: set ts=2 et sw=2 ai: -->

